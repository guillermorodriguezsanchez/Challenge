{"ast":null,"code":"import { myFunction } from \"../components/checkOnline\";\nimport { addProductOn, addProductOff } from \"../controllers/addProduct\";\nimport { getProductOff, getProductsOn } from \"../controllers/getProduct\";\n\n// myFunction -> component to check if the user is online or offline\nconst check = myFunction();\nconsole.log(check);\nexport const addProduct = product => {\n  if (check) {\n    console.log(check);\n    // add a product if your are online\n    addProductOn(product);\n  } else {\n    console.log(check);\n    // add a product in the localStorage if your are offline\n    addProductOff(product);\n  }\n};\nexport const getProduct = () => {\n  let products;\n  if (check) {\n    // Get products from the Back End -> online\n    const productsOn = getProductsOn();\n    products = productsOn;\n  } else {\n    // Get products from the LocalStorage -> offline\n    products = getProductOff();\n  }\n  return products;\n};\nexport const syncronised = () => {\n  // Check if the user is online or not\n  if (check) {\n    // If he is online GET products from LocalStorage\n    let productsOff = getProductOff();\n\n    // GET products from Back End\n    let productsOn = getProductsOn();\n\n    // Check if the product is already updated\n    for (let j = 0; j < productsOff.length; j++) {\n      for (let i = 0; productsOn.length; i++) {\n        if (productsOff[j].name != productsOn[i].name) {\n          // Send this products to the Back End\n          addProduct(productsOff[i]);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["myFunction","addProductOn","addProductOff","getProductOff","getProductsOn","check","console","log","addProduct","product","getProduct","products","productsOn","syncronised","productsOff","j","length","i","name"],"sources":["C:/Users/guill/Desktop/SOFTWARE MASTER/1 YEAR 1 SEMESTER/Advanced Software Design Techniques/Challenge/RestApi_App_Challenge/FrontEnd/challenge/src/middleware/middleware.js"],"sourcesContent":["import { myFunction } from \"../components/checkOnline\";\r\nimport { addProductOn, addProductOff } from \"../controllers/addProduct\";\r\nimport { getProductOff, getProductsOn } from \"../controllers/getProduct\";\r\n\r\n\r\n// myFunction -> component to check if the user is online or offline\r\nconst check = myFunction();\r\nconsole.log(check);\r\nexport const addProduct = (product) => {\r\n \r\n    if(check){\r\n        console.log(check);\r\n        // add a product if your are online\r\n        addProductOn(product);\r\n\r\n    }else{\r\n        console.log(check);\r\n        // add a product in the localStorage if your are offline\r\n        addProductOff(product);\r\n\r\n    }\r\n}\r\n\r\nexport const getProduct = () => {\r\n    \r\n    let products;\r\n\r\n    if(check){\r\n\r\n        // Get products from the Back End -> online\r\n        const productsOn = getProductsOn();\r\n        products = productsOn;\r\n    }else{\r\n\r\n        // Get products from the LocalStorage -> offline\r\n        products = getProductOff();\r\n        \r\n    }\r\n\r\n    return products;\r\n}\r\n\r\n\r\nexport const syncronised = () => {\r\n\r\n    // Check if the user is online or not\r\n    if(check){\r\n        // If he is online GET products from LocalStorage\r\n        let productsOff = getProductOff();\r\n\r\n        // GET products from Back End\r\n        let productsOn = getProductsOn();\r\n\r\n        // Check if the product is already updated\r\n        for(let j = 0; j < productsOff.length; j++){\r\n            for(let i = 0; productsOn.length; i++){\r\n                if(productsOff[j].name != productsOn[i].name){\r\n\r\n                     // Send this products to the Back End\r\n                    addProduct(productsOff[i]);\r\n                }\r\n                \r\n            }\r\n        }    \r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\n}\r\n\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,2BAA2B;AACtD,SAASC,YAAY,EAAEC,aAAa,QAAQ,2BAA2B;AACvE,SAASC,aAAa,EAAEC,aAAa,QAAQ,2BAA2B;;AAGxE;AACA,MAAMC,KAAK,GAAGL,UAAU,EAAE;AAC1BM,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;AAClB,OAAO,MAAMG,UAAU,GAAIC,OAAO,IAAK;EAEnC,IAAGJ,KAAK,EAAC;IACLC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;IACAJ,YAAY,CAACQ,OAAO,CAAC;EAEzB,CAAC,MAAI;IACDH,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;IACAH,aAAa,CAACO,OAAO,CAAC;EAE1B;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAM;EAE5B,IAAIC,QAAQ;EAEZ,IAAGN,KAAK,EAAC;IAEL;IACA,MAAMO,UAAU,GAAGR,aAAa,EAAE;IAClCO,QAAQ,GAAGC,UAAU;EACzB,CAAC,MAAI;IAED;IACAD,QAAQ,GAAGR,aAAa,EAAE;EAE9B;EAEA,OAAOQ,QAAQ;AACnB,CAAC;AAGD,OAAO,MAAME,WAAW,GAAG,MAAM;EAE7B;EACA,IAAGR,KAAK,EAAC;IACL;IACA,IAAIS,WAAW,GAAGX,aAAa,EAAE;;IAEjC;IACA,IAAIS,UAAU,GAAGR,aAAa,EAAE;;IAEhC;IACA,KAAI,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACE,MAAM,EAAED,CAAC,EAAE,EAAC;MACvC,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEL,UAAU,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAC;QAClC,IAAGH,WAAW,CAACC,CAAC,CAAC,CAACG,IAAI,IAAIN,UAAU,CAACK,CAAC,CAAC,CAACC,IAAI,EAAC;UAExC;UACDV,UAAU,CAACM,WAAW,CAACG,CAAC,CAAC,CAAC;QAC9B;MAEJ;IACJ;EACJ;AAMJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}